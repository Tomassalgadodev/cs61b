2 Mystery
This is a function (a.k.a. method). It takes an array of integers and an integer as arguments, and returns an
integer.
1 public static int mystery(int[] inputArray, int k) {
2 	int x = inputArray[k];
3 	int answer = k;
4 	int index = k + 1;
5 	while (index < inputArray.length) {
6 		if (inputArray[index] < x) {
7 			x = inputArray[index];
8 			answer = index;
9 		}
10 	index = index + 1;
11 	}
12 	return answer;
13 }

Describe in English what mystery returns if inputArray = [3, 0, 4, 6, 3] and k=2.

* Integer variable x is declared and set to a value of the kth index of the input array. If
  inputArray = [3, 0, 4, 6, 3] and k=2 then x = 4;
* Integer variable answer is declared and set equal to k so answer = 2;
* Integer variable index is declared and set equal to k + 1 so index = 3;
* The while loop will run as long as the value of index, which is 3, is less than the length
  of the array which is 5.
* The condition is true to the loop runs. First it checks if (inputArray[index] < x) which is
  (6 < 4) which is false so it skips the if block and increments index by one making index = 4;
* The while loop runs again because 4 < 5 is true. This time (inputArray[index] < x) is true because
  3 is less than 4. The variable x is then set to 3 and the variable answer is set equal to the index
  which is 4. Index is incremented by 1 making it 5.
* The while loop does not run again because 5 < 5 is false. The answer variable, which is 4, is returned.




CS 61B, Spring 2019, Discussion 1: Introduction to Java 3
Extra: This is another function. It takes an array of integers and returns nothing.
1 public static void mystery2(int[] inputArray) {
2 	int index = 0;
3 	while (index < inputArray.length) {
4 		int targetIndex = mystery(inputArray, index);
5 		int temp = inputArray[targetIndex];
6 		inputArray[targetIndex] = inputArray[index];
7 		inputArray[index] = temp;
8 		index = index + 1;
9 	}
10 }
Describe what mystery2 does if inputArray = [3, 0, 4, 6, 3].
* Integer variable index is declared and set equal to 0.
* The while loop checks to see if the value of index is less than the length of the array.
  Since 0 < 5 is true the loop runs. 
	* Integer variable targetIndex is set equal to the mystery method given the input of
	  the inputArray and index, which are ([3, 0, 4, 6, 3], 0). The method returns 1 so
	  targetIndex is set to 1.
	* Integer variable temp is declared and set equal to inputArray at the targetIndex index.
	  This is 0 so temp is set to 0.
	* The inputArray at the targetIndex index (1) is set to inputArray at the index index (0).
 	  The new inputArray looks like this [3, 3, 4, 6, 3].
	* The inputArray at the index index (0) is set equal to temp. The new inputArray looks like
	  this [0, 3, 4, 6, 3].
	* The index variable is incremented by one making it 1.
* The while loop checks to see if the value of index is less than the length of the array.
  Since 1 < 5 is true the loop runs. 
	* Integer variable targetIndex is set equal to the mystery method given the input of
	  the inputArray and index, which are ([0, 3, 4, 6, 3], 1). The method returns 1 so
	  targetIndex is set to 1.
	* Integer variable temp is declared and set equal to inputArray at the targetIndex index.
	  This is 3 so temp is set to 3.
	* The inputArray at the targetIndex index (1) is set to inputArray at the index index (1).
 	  The new inputArray looks like this [0, 3, 4, 6, 3].
	* The inputArray at the index index (1) is set equal to temp. The new inputArray looks like
	  this [0, 3, 4, 6, 3].
	* The index variable is incremented by one making it 2.
* The while loop checks to see if the value of index is less than the length of the array.
  Since 2 < 5 is true the loop runs. 
	* Integer variable targetIndex is set equal to the mystery method given the input of
	  the inputArray and index, which are ([0, 3, 4, 6, 3], 2). The method returns 4 so
	  targetIndex is set to 4.
	* Integer variable temp is declared and set equal to inputArray at the targetIndex index.
	  This is 3 so temp is set to 3.
	* The inputArray at the targetIndex index (4) is set to inputArray at the index index (2).
 	  The new inputArray looks like this [0, 3, 4, 6, 4].
	* The inputArray at the index index (2) is set equal to temp. The new inputArray looks like
	  this [0, 3, 3, 6, 4].
	* The index variable is incremented by one making it 3.
* The while loop checks to see if the value of index is less than the length of the array.
  Since 3 < 5 is true the loop runs. 
	* Integer variable targetIndex is set equal to the mystery method given the input of
	  the inputArray and index, which are ([0, 3, 3, 6, 4], 3). The method returns 4 so
	  targetIndex is set to 4.
	* Integer variable temp is declared and set equal to inputArray at the targetIndex index.
	  This is 4 so temp is set to 4.
	* The inputArray at the targetIndex index (4) is set to inputArray at the index index (3).
 	  The new inputArray looks like this [0, 3, 3, 6, 6].
	* The inputArray at the index index (3) is set equal to temp. The new inputArray looks like
	  this [0, 3, 3, 4, 6].
	* The index variable is incremented by one making it 4.
* The while loop checks to see if the value of index is less than the length of the array.
  Since 4 < 5 is true the loop runs. 
	* Integer variable targetIndex is set equal to the mystery method given the input of
	  the inputArray and index, which are ([0, 3, 3, 4, 6], 4). The method returns 4 so
	  targetIndex is set to 4.
	* Integer variable temp is declared and set equal to inputArray at the targetIndex index.
	  This is 6 so temp is set to 6.
	* The inputArray at the targetIndex index (4) is set to inputArray at the index index (4).
 	  The new inputArray looks like this [0, 3, 3, 4, 6].
	* The inputArray at the index index (4) is set equal to temp. The new inputArray looks like
	  this [0, 3, 3, 4, 6].
	* The index variable is incremented by one making it 5.
* The while loop checks to see if the value of index is less than the length of the array.
  Since 5 < 5 is false the loop does not run. The program stops.
* At the end the inputArray should look like this [0, 3, 3, 4, 6].

3 Writing Your First Program
Implement fib which takes in an integer n and returns the nth Fibonacci number.
The Fibonacci sequence is 0,1,1,2,3,5,8,13,21,....
public static int fib(int n) {
	
}
Extra: Implement fib in 5 lines or fewer. Your answer must be efficient.
public static int fib2(int n, int k, int f0, int f1) {